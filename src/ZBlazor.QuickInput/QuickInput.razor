@typeparam TItem
<div class="@($"zb-quick-input-container {ContainerClass}")"
     style="@($"width:{Width};")">
    <input type="text"
           value="@InputValue"
           class="@Class"
           @attributes="InputAttributes"
           @oninput="OnValueChange"
           @onkeydown="OnKeyDown"
           @onfocus="OnFocus"
           @onblur="OnBlur"
           @onmousedown="OnMouseDown"
           @onmouseup="OnMouseUp">
    @if (ShowClearButton)
    {
        <span class="zb-quick-input-clear-button"
              title="Clear value"
              style="@($"{(hasInputValue ? "" : "display: none;")}")"
              @onclick="ClearInputValue"
              @onclick:stopPropagation="true"
              @onclick:preventDefault="true"
              @onmousedown:preventDefault="true"
              @onmousedown:stopPropagation="true"
              @onmouseup:preventDefault="true"
              @onmouseup:stopPropagation="true">
            <span class="zb-quick-input-close-symbol">&times;</span>
        </span>
    }
    <div class="zb-quick-input-items"
         @onmousedown="OnMouseDown"
         @onmouseup="OnMouseUp">

        @{ int showingIndex = 0; }

        @foreach (var item in SearchItems.OrderByDescending(i => i.Score))
        {
            {
                if (item.IsMatch || isOpen)
                {
                    item.IsSelected = showingIndex == selectedItemIndex;
                    showingIndex += 1;
                }
                item.ShouldItemShow = ShouldItemShow(item.IsMatch, showingIndex);

                if (!item.ShouldItemShow)
                {
                    continue;
                }
            }

            <div @key="item.Text"
                 class="@(item.IsSelected ? "zb-quick-input-active" : "")"
                 @onclick="@(async () => await OnSelected(item))">
                @if(ItemTemplate != null)
                {
                    @ItemTemplate(item)
                }
                else
                {
                    @item.GetDisplayText(HighlightMatches)
                }
            </div>
        }
    </div>
</div>
