@page "/"
@using Microsoft.Extensions.Logging
@inject ILogger<Index> Logger

<h3>QuickInput</h3>

<div>
    <QuickInput placeholder="Enter a country"
                  Data="countries"
                  Class="form-control"
                  MaxItemsToShow="maxItemsToShow"
                  TItem="string"
                  OnItemSelected="OnItemSelected"
                  HighlightMatches="highlightMatches"
                  SelectFirstMatch="selectFirstMatch"
                  ShowClearButton="showClearButton"
                  OpenOnFocus="openOnFocus"
                  ClearOnEscape="clearOnEscape">
        <ItemTemplate>
            <strong>Country:</strong> @context.GetDisplayText()
        </ItemTemplate>
    </QuickInput>
</div>

<div>
    <QuickInput placeholder="Enter an icon name"
                  Data="iconNames"
                  Class="form-control"
                  MaxItemsToShow="maxItemsToShow"
                  TItem="string"
                  OnItemSelected="OnItemSelected"
                  HighlightMatches="highlightMatches"
                  SelectFirstMatch="selectFirstMatch"
                  ShowClearButton="showClearButton"
                  OpenOnFocus="openOnFocus"
                  ClearOnEscape="clearOnEscape" />
</div>

<div>
    <QuickInput placeholder="Enter a rating"
                  Data="Ratings"
                  Class="form-control"
                  MaxItemsToShow="maxItemsToShow"
                  TItem="Rating"
                  OnItemSelected="OnRatingSelected"
                  HighlightMatches="highlightMatches"
                  SelectFirstMatch="selectFirstMatch"
                  ShowClearButton="showClearButton"
                  OpenOnFocus="openOnFocus"
                  ClearOnEscape="clearOnEscape">
        <ItemTemplate>
            <strong>Rating:</strong> @context.GetDisplayText() <small>@context.DataObject.Value</small>
        </ItemTemplate>
    </QuickInput>
</div>

<hr />

<label>Current Value:</label> @inputValue

<div class="form-check">
    <label class="form-check-label">
        <input class="form-check-input" type="checkbox" @bind="openOnFocus">
        Open on focus
    </label>
</div>
<div class="form-check">
    <label class="form-check-label">
        <input class="form-check-input" type="checkbox" @bind="highlightMatches">
        Highlight matches
    </label>
</div>
<div class="form-check">
    <label class="form-check-label">
        <input class="form-check-input" type="checkbox" @bind="selectFirstMatch">
        Select first match
    </label>
</div>
<div class="form-check">
    <label class="form-check-label">
        <input class="form-check-input" type="checkbox" @bind="showClearButton">
        Show clear button
    </label>
</div>
<div class="form-check">
    <label class="form-check-label">
        <input class="form-check-input" type="checkbox" @bind="clearOnEscape">
        Clear on escape
    </label>
</div>

<form class="form-inline" style="margin-bottom: 20px;">
    <div class="form-group">
        <label style="margin-right: 10px;">Max items to show</label>
        <input type="number" class="form-control" style="width: auto;" @bind="maxItemsToShow">
    </div>
</form>

<div style="background-color:lightgrey; padding: 15px; border-radius: 10px;">
    <pre style="margin-bottom: 0;"><code>@System.Text.Json.JsonSerializer.Serialize(selectedItems, new System.Text.Json.JsonSerializerOptions { WriteIndented = true })</code></pre>
</div>

@code {
    string inputValue = "";
    bool openOnFocus = true;
    bool highlightMatches = true;
    bool selectFirstMatch = true;
    bool clearOnEscape = true;
    int maxItemsToShow = 5;
    bool showClearButton = true;

    List<string> selectedItems = new List<string>();

    string[] iconNames = Enum.GetNames(typeof(IconName));

    string[] countries;

    Rating[] Ratings = new []
    {
        new Rating("Very good", 5),
        new Rating("Good", 4),
        new Rating("Fair", 3),
        new Rating("Poor", 2),
        new Rating("Very poor", 1)
    };

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Logger.LogDebug("Index: first render");
            countries = TestData.CountryNames;
            StateHasChanged();
        }
    }

    void OnItemSelected(string text)
    {
        selectedItems.Add(text);
    }

    void OnRatingSelected(Rating rating)
    {
        Log.Information("Rating selected: {@Rating}", rating);
        selectedItems.Add(rating.Text);
    }

    class Rating
    {
        public Rating(string text, int value)
        {
            Text = text;
            Value = value;
        }

        public string Text { get; set; } = null!;
        public int Value { get; set; }
    }
}
